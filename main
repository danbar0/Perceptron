# This program calculates a perceptron to guess at the position of a point being above or below a line
# Written by Daniel Barrera
# 4/12/2018

import random
import pygame
import pygameUtility as pgUtil
import math

class Perceptron:
    def __init__(self, inputs):
        self.weights = []
        self.learning_constant = 0.01
        for i in range(inputs):
            self.weights.append(random.uniform(-1, 1))

    # Perceptron activation function
    def activate(self, value):
        if value > 0:
            return .1

        else:
            return -.1

    # Calculate outputs based on weights and inputs
    # Number of inputs must be equal to amount of inputs given upon construction of class
    def feed_forward(self, inputs):
        weighted_sum = 0.0

        for i in range(len(self.weights)):
            weighted_sum += inputs[i] * self.weights[i]

        return self.activate(weighted_sum)

    def train(self, inputs, desired):
        guess = self.feed_forward(inputs)
        error = desired - guess
        print(self.weights)
        for i in range(len(self.weights)):
            self.weights[i] += self.learning_constant * error * inputs[i]



class Trainer:
    def __init__(self, x, y, a):
        self.lastGuess = 0
        self.inputs = [0] * 3
        self.answer = 0

        self.inputs[0] = x
        self.inputs[1] = y
        self.inputs[2] = 1
        self.answer = a

def f(m, x, b):
    # y = mx + b
    return m * x + b

# Map to a new range of vales
def translate(value, leftMin, leftMax, rightMin, rightMax):
    leftSpan = leftMax - leftMin
    rightSpan = rightMax - rightMin
    valueScaled = float(value - leftMin) / float(leftSpan)

    return rightMin + (valueScaled * rightSpan)

def quit():
    pygame.quit()
    exit()

def main():
    pg = pgUtil.PygameUtility(120, 1000, 1000)
    ptron = Perceptron(3)

    points = 5000
    training = []
    count = 0
    position = (0,0)

    for i in range(points):
        x = random.uniform(-1, 1)
        y = random.uniform(-1, 1)

        answer = 1
        if y < f(1, x, 0):
            answer = -1

        training.append(Trainer(x, y, answer))

    while True:
        pg.event_update()

        if count < len(training) - 1:
            ptron.train(training[count].inputs, training[count].answer)
            count += 1

        for i in range(count):

            if count < len(training) - 1:
                guess = ptron.feed_forward(training[i].inputs)
                training[i].lastGuess = guess
            else:
                guess = training[i].lastGuess

            position = (round(translate(training[i].inputs[0], -1, 1, 0, pg.display_width)),
                        round(translate(training[i].inputs[1], -1, 1, pg.display_height, 0)))

            if guess > 0:
                pg.draw_circle(position, 5, 1)
            else:
                pg.draw_circle(position, 5, 0)

        pg.update_point_counter(count)
        pg.draw_button("Reset", pg.display_width-200, pg.display_height-100, 90, 90,
                       (0,255,0), (0,230,0), main)
        pg.draw_button("Quit", pg.display_width - 100, pg.display_height - 100, 90, 90,
                       (255, 0, 0), (230, 0, 0), quit)
        pg.draw_line((pg.display_width / 2, 0), (pg.display_width / 2, pg.display_height), 3)
        pg.draw_line((0, pg.display_height/2), (pg.display_width, pg.display_height/2), 3)
        pg.display_update()


if __name__ == '__main__':
    main()
    pygame.quit()
    exit()
