# This program calculates a perceptron to guess at the position of a point being above or below a line
# Written by Daniel Barrera
# 4/12/2018

import random
import pygame

class Perceptron:
    def __init__(self, inputs):
        self.weights = []
        self.learning_constant = 0.1

        for i in range(inputs):
            self.weights.append(random.uniform(-1, 1))

    # Perceptron activation function
    def activate(self, value):
        if value > 0:
            return 1

        else:
            return 0

    # Calculate outputs based on weights and inputs
    # Number of inputs must be equal to amount of inputs given upon construction of class
    def feed_forward(self, inputs):
        weighted_sum = 0.0

        for i in range(len(self.weights)):
            weighted_sum += inputs[i] * self.weights[i]

        return self.activate(weighted_sum)

    # asdf
    def train(self, inputs, desired):
        guess = self.feed_forward(inputs)
        error = desired - guess

        for i in range(len(self.weights)):
            self.weights[i] += self.learning_constant * error * inputs[i]
            print(self.weights)


class Trainer:
    def __init__(self, x, y, a):
        self.inputs = [0] * 3
        self.answer = 0

        self.inputs[0] = x
        self.inputs[1] = y
        self.inputs[2] = 1
        self.answer = a


class PygameUtility:

    def __init__(self, fps, width, height):
        pygame.init()
        self.clock = pygame.time.Clock()

        # Display parameters
        self.display_height = width
        self.display_width = height
        self.game_display = pygame.display.set_mode((self.display_width, self.display_height))
        self.fps = fps

        # Colors
        self.white = (255, 255, 255)
        self.black = (0, 0, 0)
        self.red = (200, 0, 0)
        self.bright_red = (255, 0, 0)
        self.green = (0, 200, 0)
        self.bright_green = (0, 255, 0)
        self.blue = (0, 0, 200)
        self.bright_blue = (0, 0, 255)

    def event_update(self):
        self.game_display.fill(self.white)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

    def quit(self):
        pygame.quit()

    def sprite_update(self, sprite_group):
        sprite_group.draw(self.game_display)

    def display_update(self):
        pygame.display.flip()
        self.clock.tick(self.fps)

    def text_objects(self, text, font):
        text_surface = font.render(text, True, self.black)
        return text_surface, text_surface.get_rect()

    def fill_background(self, color):
        self.game_display.fill(color)

    def draw_circle(self, position, radius, border):
        pygame.draw.circle(self.game_display, self.black, position, radius, border)

    def draw_button(self, msg, x, y, width, height, a_color, i_color, action=None):
        mouse = pygame.mouse.get_pos()
        click = pygame.mouse.get_pressed()

        if x + width > mouse[0] > x and y + height > mouse[1] > y:
            pygame.draw.rect(self.game_display, a_color, (x, y, width, height))
            if click[0] == 1 and action is not None:
                action()

        else:
            pygame.draw.rect(self.game_display, i_color, (x, y, width, height))

        small_text = pygame.font.Font("freesansbold.ttf", 20)
        text_surf, text_rect = self.text_objects(msg, small_text)
        text_rect.center = ((x + (width/2)), (y + (height/2)))
        self.game_display.blit(text_surf, text_rect)


def f(x):
    return (0.5 * x)


def main():
    pg = PygameUtility(120, 1000, 1000)
    ptron = Perceptron(3)

    points = 2000
    training = []
    count = 0

    for i in range(points):
        x = random.randrange(0, pg.display_width)
        y = random.randrange(0, pg.display_height)

        answer = 1
        if y < f(x):
            answer = -1

        training.append(Trainer(x, y, answer))

    while True:
        pg.event_update()

        ptron.train(training[count].inputs, training[count].answer)
        count = (count + 1) % len(training)

        for i in range(count):
            guess = ptron.feed_forward(training[i].inputs)

            position = training[i].inputs[0], training[i].inputs[1]
            if guess > 0:
                pg.draw_circle(position, 5, 1)
            else:
                pg.draw_circle(position, 5, 0)

        pg.display_update()


if __name__ == '__main__':
    main()
